generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  username        String    @unique
  id              Int       @id @default(autoincrement())
  hash            String?
  intralogin      String?   @unique
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  status          String    @default("offline")
  friends         Int[]
  socketId        String?
  channels        Channel[] @relation("Memberships")
  messagesSent    Message[] @relation("Author")
  messageReceived Message[] @relation("Target")
  gamesWon        Game[]    @relation("Winner")
  gamesLost       Game[]    @relation("Loser")
  gamesPlayed     Game[]    @relation("Players")
  wins            Int       @default(0)
  losses          Int       @default(0)

  tokens UserToken[]

  twoFactorAuthActive Boolean @default(false)
  twoFactorAuthSecret String?

  @@unique(id)
  @@map("users")
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  author    User     @relation("Author", fields: [authorId], references: [id])
  target    User?    @relation("Target", fields: [targetId], references: [id])
  createdAt DateTime @default(now())
  targetId  Int?
  authorId  Int
  Channel   Channel? @relation(fields: [channelId], references: [id])
  channelId Int?
}

model Channel {
  id       Int       @id @default(autoincrement())
  name     String
  public   Boolean
  password String?
  messages Message[]
  members  User[]    @relation("Memberships")
  creator  String
  invited  Int[]

  @@unique([name])
  @@unique([id])
}

model UserToken {
  id String @id @default(uuid())

  user   User @relation(fields: [UserId], references: [id], onDelete: Cascade)
  UserId Int

  refreshToken String
  family       String   @unique
  createdAt    DateTime @default(now())

  @@map("usertokens")
}

model Game {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  mode        String
  players     User[]   @relation("Players")
  winner      User?    @relation("Winner", fields: [winnerId], references: [id])
  loser       User?    @relation("Loser", fields: [loserId], references: [id])
  winnerId    Int?
  loserId     Int?
  winnerScore Int?
  loserScore  Int?
}
